- name: snapd - get list of installed snap applications
  ansible.builtin.shell: |
    snap list | grep -v 'core22\|snapd \|bare\|snap-store' | tail -n+2 | cut -d' ' -f1
  register: installed_snap_apps

- name: snapd - uninstall all snap applications
  ansible.builtin.command:
    cmd: "snap remove --purge {{ item }}"
  loop: "{{ installed_snap_apps.stdout_lines }}"

- name: snapd - uninstall basic snaps
  ansible.builtin.command:
    cmd: "snap remove --purge {{ item }}"
  loop:
    - snap-store
    - core22
    - bare
    - snapd
  ignore_errors: true

- name: snapd - disable services
  ansible.builtin.systemd:
    name: snapd
    enabled: false
    state: stopped
  ignore_errors: true 

- name: snapd - remove
  ansible.builtin.apt:
    name: snapd
    state: absent
    purge: true
  ignore_errors: true

- name: snapd - remove unused packages
  ansible.builtin.apt:
    autoremove: true

- name: reinstall basic applications
  ansible.builtin.apt:
    name: "{{ item }}"
    state: latest
    recommends: true
  loop:
    - gnome-core
  when: os_type == 'desktop'
  
- name: prevent snapd from being reinstalled
  ansible.builtin.copy:
    dest: /etc/apt/preferences.d/nosnap.pref
    src: nosnap.pref

- name: snapd - remove folder in root home
  ansible.builtin.file:
    path: "/root/snap"
    state: absent

- name: snapd - find userdirs
  ansible.builtin.find:
    paths: /home
    patterns: "snap"
    file_type: directory
    recurse: true
  register: snap_userdirs

- name: snapd - remove folders in userhomes
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: absent
  loop: "{{ snap_userdirs.files }}"
  when: snap_userdirs.matched > 0
