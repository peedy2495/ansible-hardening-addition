- name: enable kaslr
  block:
    - name: boot-option - check if kaslr is already disabled
      ansible.builtin.shell: grep GRUB_CMDLINE_LINUX_DEFAULT /etc/default/grub | grep -c "kaslr"
      register: boot_kaslr_status
      ignore_errors: true

    - name: boot-option - enable kaslr
      ansible.builtin.lineinfile:
        path: "/etc/default/grub"
        regexp: 'GRUB_CMDLINE_LINUX_DEFAULT="(.*)"'
        line: 'GRUB_CMDLINE_LINUX_DEFAULT="\1 kaslr"'
        backrefs: yes
      when: boot_kaslr_status.stdout == "0"

    - name: update-grub
      ansible.builtin.shell: update-grub
      when: boot_kaslr_status.stdout == "0"
      notify: reboot system
  tags:
    - kernel_kaslr

- name: enable audit
  block:
    - name: boot-option - check if audit is already disabled
      ansible.builtin.shell: grep GRUB_CMDLINE_LINUX_DEFAULT /etc/default/grub | grep -c "audit"
      register: boot_audit_status
      ignore_errors: true

    - name: boot-option - enable audit
      ansible.builtin.lineinfile:
        path: "/etc/default/grub"
        regexp: 'GRUB_CMDLINE_LINUX_DEFAULT="(.*)"'
        line: 'GRUB_CMDLINE_LINUX_DEFAULT="\1 audit=1"'
        backrefs: yes
      when: boot_audit_status.stdout == "0"

    - name: update-grub
      ansible.builtin.shell: update-grub
      when: boot_audit_status.stdout == "0"
      #notify: reboot system
  tags:
    - kernel_audit

- name: enable audit_backlog_limit
  block:
    - name: boot-option - check if audit_backlog_limit is already disabled
      ansible.builtin.shell: grep GRUB_CMDLINE_LINUX_DEFAULT /etc/default/grub | grep -c "audit_backlog_limit"
      register: boot_audit_backlog_limit_status
      ignore_errors: true

    - name: boot-option - enable audit_backlog_limit
      ansible.builtin.lineinfile:
        path: "/etc/default/grub"
        regexp: 'GRUB_CMDLINE_LINUX_DEFAULT="(.*)"'
        line: 'GRUB_CMDLINE_LINUX_DEFAULT="\1 audit_backlog_limit=8192"'
        backrefs: yes
      when: boot_audit_backlog_limit_status.stdout == "0"

    - name: update-grub
      ansible.builtin.shell: update-grub
      when: boot_audit_backlog_limit_status.stdout == "0"
      #notify: reboot system
  tags:
    - kernel_audit_backlog_limit

- name: modify config
  ansible.builtin.lineinfile:
    path: /etc/sysctl.d/98-sec-kernel.conf
    create: yes
    mode: 644
    owner: root
    group: root
    regexp: "^(.*){{ item.key }}\ "
    line: "{{ item.key }} = {{ item.value }}"
    state: present
  with_items:
    - key: "kernel.randomize_va_space"
      value: "2"
    # hard- / hymlink, fifo, regular protection, ptrace scope
    - key: "fs.protected_hardlinks"
      value: "1"
    - key: "fs.protected_symlinks"
      value: "1"
    - key: "fs.protected_fifos"
      value: "2"
    - key: "fs.protected_regular"
      value: "2"
    - key: "kernel.yama.ptrace_scope"
      value: "3"
    # kernel-pointer, dmesg
    - key: "kernel.kptr_restrict"
      value: "1"
    - key: "kernel.dmesg_restrict"
      value: "1"
    # kernel and process-crashdumps
    - key: "fs.suid_dumpable"
      value: "0"
    # berkeley packet filter (bpf)
    - key: "kernel.unprivileged_bpf_disabled"
      value: "1"
    - key: "net.core.bpf_jit_enable"
      value: "1"
    - key: "net.core.bpf_jit_harden"
      value: "1"
  notify: reboot system

- name: modify limits
  ansible.builtin.lineinfile:
    path: /etc/security/limits.conf
    create: yes
    mode: 644
    owner: root
    group: root
    regexp: "(.*)hard(.*)core(.*)"
    line: "*                hard    core            0"
    state: present
  notify: reboot system

- name: default blacklisting modules
  block:
    - name: create a virgin blacklist file
      ansible.builtin.file:
        path: /etc/modprobe.d/blacklist-hardening.conf
        mode: 644
        owner: root
        group: root
        state: touch

    - name: modify blacklist - adding undesirable modules
      ansible.builtin.lineinfile:
        path: /etc/modprobe.d/blacklist-hardening.conf
        regexp: "install {{ item }}\ "
        line: "install {{ item }} /bin/true"
        state: present
      with_items:
        # unused filesystems
        - af_802154
        - ath
        - atm
        - ax25
        - appletalk
        - brcm80211
        - can
        - cifs
        - cramfs
        - dccp
        - decnet
        - dv1394
        - econet
        - firewire-ohci
        - firewire-sbp2
        - freevxfs
        - gfs2
        - hfs
        - hfsplus
        - ipx
        - iwlegacy
        - iwlwifi
        - jffs2
        - ksmbd
        - mwifiex
        - netrom
        - nfs
        - nfsv3
        - nfsv4
        - n-hdlc
        - ohci1394
        - psnap
        - p8022
        - p8023
        - raw1394
        - rds
        - rose
        - rt1818x
        - rt2x00
        - rtlwifi
        - sctp
        - spb2
        - squashfs
        - tipc
        - udf
        - usb-storage
        - video1394
        - x25
        - vivid
        - bluetooth
        - btusb
        - uvcvideo
    - name: modify blacklist - activate retroactice needs
      ansible.builtin.lineinfile:
        path: /etc/modprobe.d/blacklist-hardening.conf
        regexp: "install {{ item }}\ "
        line: "install {{ item }} /bin/true"
        state: absent
      with_items:
        # usb media needed
        - usb-storage
      notify: reboot system

- name: uninstall kernel extra modules
  block:
    - name: get current kernel version
      ansible.builtin.shell: uname -r
      ignore_errors: true
      register: kernel_version
    - name: remove kernel extra modules
      ansible.builtin.apt:
        pkg:
          - "linux-modules-extra-{{ kernel_version.stdout }}"
        state: absent
        purge: yes
        update_cache: no
    - name: autoremove orphanned packages
      ansible.builtin.apt:
        autoremove: yes
    - name: keep microcode updates
      ansible.builtin.apt:
        pkg:
          - intel-microcode
          - amd64-microcode
      notify: reboot system
  when: rm_extra_modules and
    not (ansible_distribution == 'Ubuntu' and os_type == 'desktop')

- name: use hwe kernel for modern hardware  
  block:
    - name: install hwe kernel
      ansible.builtin.apt:
        pkg:
          - linux-generic-hwe-{{ ansible_distribution_version }}
        state: present
        update_cache: yes
    - name: remove old kernel
      ansible.builtin.apt:
        pkg:
          - linux-generic
          - linux-image-generic
          - linux-headers-generic
        autoremove: yes
        state: absent
        purge: yes
  when: ansible_distribution == 'Ubuntu' #and os_type == 'desktop'
  tags:
    - wip

- name: prevent loading modules after boot
  block:
    - name: deploy kernel-modules-disabled.service
      ansible.builtin.copy:
        src: kernel-modules-disabled.service
        dest: /etc/systemd/system/
        force: yes
        owner: root
        group: root
        mode: 0755
    - name: start kernel-modules-disabled.service
      ansible.builtin.systemd:
        name: kernel-modules-disabled.service
        daemon_reload: yes
        enabled: yes
        state: started
    - name: preload kernel-modules on boot for using usb attached storage
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: /etc/modules-load.d/
        force: true
        owner: root
        group: root
        mode: 0644
      with_fileglob: "modprobe_*.conf"
      notify: reboot system

- name: blacklist unused modules
  block:
    - name: determine available modules
      ansible.builtin.shell: find /lib/modules/$(uname -r)/ -type f -name *.ko -printf "%f\n" | sed s/\.ko// | sort
      register: modules_available
    - name: determine loaded modules
      ansible.builtin.shell: lsmod | awk '{print $1}' | sort
      register: modules_loaded

    - name: write deltas to blacklist
      ansible.builtin.lineinfile:
        path: /etc/modprobe.d/blacklist-unused.conf
        create: yes
        owner: root
        group: root
        mode: 0640
        line: "install {{ item }} /bin/true"
      when: "item not in modules_loaded.stdout_lines"
      loop: "{{modules_available.stdout_lines}}"

    - name: unused blacklist - exceptions
      ansible.builtin.lineinfile:
        path: /etc/modprobe.d/blacklist-unused.conf
        regexp: "install {{ item }}\ "
        line: "install {{ item }} /bin/true"
        state: absent
      notify: clear caches
  when: blacklist_unused

- name: deactivate magic sysrq
  ansible.builtin.lineinfile:
    path: /etc/sysctl.d/10-magic-sysrq.conf
    regexp: "^kernel.sysrq"
    line: "kernel.sysrq = 0"
    state: present
  notify: reboot system

- name: run queued handlers
  meta: flush_handlers
